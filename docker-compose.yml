version: '3'

services:
    main-service:
        container_name: main-service
        build: './main-service'
        command: npm run start:debug
        env_file: ./.env
        ports:
            - ${MAIN_PORT}:${MAIN_PORT}
        networks:
            - webnet
        volumes:
            - ./main-service:/app
        restart: on-failure
        depends_on:
            - postgres-db

    transport-service:
        container_name: transport-service
        build: './transport-service'
        command: go run main.go
        env_file: ./.env
        ports:
            - ${GRPC_PORT}:${GRPC_PORT}
        networks:
            - webnet
        volumes:
            - ./transport-service:/go/src/
        restart: on-failure
        depends_on:
            - redis

    postgres-db:
        image: postgres:alpine
        env_file: ./.env
        environment:
            POSTGRES_DB: ${PG_DB}
            POSTGRES_USER: ${PG_USER}
            POSTGRES_PASSWORD: ${PG_PASS} 
            PG_DATA: /var/lib/postgresql/data
        ports:
            - "5432:5432"
        expose:
            - '5432'
        networks:
            - webnet
        volumes:
            - pgdata:/var/lib/postgresql/data
            
    redis:
        image: redis:alpine
        hostname: redis
        ports:
            - "6379:6379"
        expose:
            - '6379'
        networks:
            - webnet

    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        ports:
            - "2181:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 32181
            ZOOKEEPER_TICK_TIME: 2000
        
    kafka:
        image:  confluentinc/cp-kafka:latest
        depends_on: 
            - zookeeper
        ports: 
            - "9092:9092"
        environment: 
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:32181
            KAFKA_BROKER_ID: 1
            KAFKA_CREATE_TOPICS: order-topic:1:1
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:29092
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            
networks:
    webnet:

volumes:
    pgdata: