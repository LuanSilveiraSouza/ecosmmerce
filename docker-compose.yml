version: '3'

services:
    main-service:
        container_name: main-service
        build: './main-service'
        command: npm run start:debug
        env_file: ./.env
        ports:
            - ${MAIN_PORT}:${MAIN_PORT}
        networks:
            - webnet
        volumes:
            - ./main-service:/app
        restart: on-failure
        depends_on:
            - postgres-db
            - kafka

    transport-service:
        container_name: transport-service
        build: './transport-service'
        command: go run main.go
        env_file: ./.env
        ports:
            - ${GRPC_PORT}:${GRPC_PORT}
        networks:
            - webnet
        volumes:
            - ./transport-service:/go/src/
        restart: on-failure
        depends_on:
            - redis
            - main-service

    payment-service:
        container_name: payment-service
        build: './payment-service'
        command: npm run start
        env_file: ./.env
        ports:
            - ${PAYMENT_PORT}:${PAYMENT_PORT}
        networks:
            - webnet
        volumes:
            - ./payment-service:/app
        restart: on-failure
        depends_on:
            - main-service
            - kafka

    postgres-db:
        image: postgres:alpine
        env_file: ./.env
        environment:
            POSTGRES_DB: ${PG_DB}
            POSTGRES_USER: ${PG_USER}
            POSTGRES_PASSWORD: ${PG_PASS} 
            PG_DATA: /var/lib/postgresql/data
        ports:
            - "5432:5432"
        expose:
            - '5432'
        networks:
            - webnet
        volumes:
            - pgdata:/var/lib/postgresql/data
            
    redis:
        image: redis:alpine
        hostname: redis
        ports:
            - "6379:6379"
        expose:
            - '6379'
        networks:
            - webnet

    mongo-db:
        image: mongo
        ports:
            - "27017:27017"
        expose:
            - '27017'
        networks:
            - webnet
        env_file: ./.env
        environment: 
            MONGO_INITDB_DATABASE: ${MONGO_DB}
            MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
            MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASS} 
        volumes:
            - ./infra/mongodb/mongod.conf:/etc/mongod.conf
            - ./infra/mongodb/initdb.d/:/docker-entrypoint-initdb.d/
            - ./infra/mongodb/data/db/:/data/db/
            - ./infra/mongodb/data/log/:/var/log/mongodb/
        command: ["-f", "/etc/mongod.conf"]

    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        ports:
            - "2181:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        networks:
            - webnet

    kafka:
        image: confluentinc/cp-kafka:latest
        depends_on: 
            - zookeeper
        ports: 
            - "9092:9092"
        environment: 
            KAFKA_CREATE_TOPICS: orders:1:1
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_LOG4J_LOGGERS: "org.apache.zookeeper=OFF,org.apache.kafka=OFF,kafka=OFF,kafka.cluster=OFF,kafka.controller=OFF,kafka.coordinator=OFF,kafka.log=OFF,kafka.server=OFF,kafka.zookeeper=OFF,state.change.logger=OFF"
            KAFKA_LOG4J_ROOT_LOGLEVEL: ERROR 
            KAFKA_TOOLS_LOG4J_LOGLEVEL: ERROR
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - webnet
            
networks:
    webnet:

volumes:
    pgdata: